二、yaml语法
1、基本规则


 1. 大小写敏感
 2. 使用缩进表示层级关系
 3. 缩进时不允许使用Tab，只允许使用空格
 4. 缩进的空格数目不重要，只要相同层级的元素左对齐即可
 5. # 表示注释，从它开始到行尾都被忽略

2、yaml转字典
yaml中支持映射或字典的表示，如下：

 1. # 下面格式读到Python里会是个dict
 2. name: 灰蓝
 3. age: 0
 4. job: Tester

输出：

 1. {'name': '灰蓝', 'age': 0, 'job': 'Tester'}

3、yaml转列表
yaml中支持列表或数组的表示，如下：

# 下面格式读到Python里会是个list
- 灰蓝
- 0
- Tester

输出：

['灰蓝', 0, 'Tester']

4、复合结构：
字典和列表可以复合起来使用，如下：

# 下面格式读到Python里是个list里包含dict
- name: 灰蓝
  age: 0
  job: Tester
- name: James
  age: 30

输出：

[{'name': '灰蓝', 'age': 0, 'job': 'Tester'}, {'name': 'James', 'age': 30}]


5、基本类型：
yaml中有以下基本类型：

字符串
整型
浮点型
布尔型
null
时间
日期

我们写个例子来看下：

# 这个例子输出一个字典，其中value包括所有基本类型
str: "Hello World!"
int: 110
float: 3.141
boolean: true  # or false
None: null  # 也可以用 ~ 号来表示 null
time: 2016-09-22t11:43:30.20+08:00  # ISO8601，写法百度
date: 2016-09-22  # 同样ISO8601

输出：
{'str': 'Hello World!', 'int': 110, 'float': 3.141, 'boolean': True, 'None': None, 'time': datetime.datetime(2016, 9, 22, 3, 43, 30, 200000), 'date': datetime.date(2016, 9, 22)}

如果字符串没有空格或特殊字符，不需要加引号，但如果其中有空格或特殊字符，则需要加引号了

str: 灰蓝
str1: "Hello World"
str2: "Hello\nWorld"

输出：

{'str': '灰蓝', 'str1': 'Hello World', 'str2': 'Hello\nWorld'}

这里要注意单引号和双引号的区别，单引号中的特殊字符转到Python会被转义，也就是到最后是原样输出了，双引号不会被Python转义，到最后是输出了特殊字符；如：

str1: 'Hello\nWorld'
str2: "Hello\nWorld"

输出：

{'str1': 'Hello\\nWorld', 'str2': 'Hello\nWorld'}
可以看到，单引号中的’\n’最后是输出了，双引号中的’\n’最后是转义成了回车

6、引用
& 和 * 用于引用

name: &name 灰蓝
tester: *name

这个相当于一下脚本：

name: 灰蓝
tester: 灰蓝

输出：

{'name': '灰蓝', 'tester': '灰蓝'}

7、强制转换
yaml是可以进行强制转换的，用 !! 实现，如下：

str: !!str 3.14
int: !!int "123"

输出：

{'int': 123, 'str': '3.14'}
1
明显能够看出123被强转成了int类型，而float型的3.14则被强转成了str型。

8、分段
在同一个yaml文件中，可以用 — 来分段，这样可以将多个文档写在一个文件中

---
name: James
age: 20
---
name: Lily
age: 19

四、示例
yaml是一种很清晰、简洁的格式，而且跟Python非常合拍，非常容易操作，我们在搭建自动化测试框架的时候，可以采用yaml作为配置文件，或者用例文件，下面给出一个用例的示例

# Test using included Django test app
# First install python-django
# Then launch the app in another terminal by doing
#   cd testapp
#   python manage.py testserver test_data.json
# Once launched, tests can be executed via:
#   python resttest.py http://localhost:8000 miniapp-test.yaml
---
- config:
    - testset: "Tests using test app"

- test: # create entity
    - name: "Basic get"
    - url: "/api/person/"
- test: # create entity
    - name: "Get single person"
    - url: "/api/person/1/"
- test: # create entity
    - name: "Get single person"
    - url: "/api/person/1/"
    - method: 'DELETE'
- test: # create entity by PUT
    - name: "Create/update person"
    - url: "/api/person/1/"
    - method: "PUT"
    - body: '{"first_name": "Gaius","id": 1,"last_name": "Baltar","login": "gbaltar"}'
    - headers: {'Content-Type': 'application/json'}
- test: # create entity by POST
    - name: "Create person"
    - url: "/api/person/"
    - method: "POST"
    - body: '{"first_name": "Willim","last_name": "Adama","login": "theadmiral"}'
    - headers: {Content-Type: application/json}